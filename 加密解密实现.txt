import java.util.Scanner;
public class test1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("请输入要加密的密码：");
        String password = scanner.nextLine();
        if (isPassword(password)) {
            String encryptedPassword = encrypt(password);
            System.out.println("加密后的密码为：" + encryptedPassword);
        } else {
            System.out.println("密码不符合要求，请重新输入。");
        }
        System.out.println("请输入要解密的密码：");
        String encryptedPassword2 = scanner.nextLine();
        String decryptedPassword = decrypt(encryptedPassword2);
        System.out.println("解密后的密码为：" + decryptedPassword);
    }
    // 判断密码是否符合要求
    public static boolean isPassword(String password) {
        if (password.length() > 16) {
            return false;
        }
        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);
            //判断一个字符c是否是字母或数字。如果不是，则返回false。
            if (!Character.isLetterOrDigit(c)) {
                return false;
            }
        }
        return true;
    }
    // 加密密码
    public static String encrypt(String password) {
        StringBuilder encryptedPassword = new StringBuilder();
        /*
        代码逐个遍历密码中的字符，对每个字符进行以下操作：
        1. 获取字符的ASCII码值。
        2. 将ASCII码值加上字符在密码中的位置索引（i+1） 再加上3。
        3. 将得到的结果转换为对应的字符，并将其追加到加密密码字符串中。
         */
        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);
            int ascii = (int) c + i + 1 + 3;
            encryptedPassword.append((char) ascii);
        }
        //将加密密码的第一个字符和最后一个字符交换位置。
        if (encryptedPassword.length() >= 2) {
            char firstChar = encryptedPassword.charAt(0);
            char lastChar = encryptedPassword.charAt(encryptedPassword.length() - 1);
            encryptedPassword.setCharAt(0, lastChar);
            encryptedPassword.setCharAt(encryptedPassword.length() - 1, firstChar);
        }
        encryptedPassword.reverse();
        return encryptedPassword.toString();
    }
    // 解密密码
    public static String decrypt(String encryptedPassword) {
        StringBuilder decryptedPassword = new StringBuilder(encryptedPassword);
        //将解密后的密码进行反转，并且如果密码的长度大于等于2，则将密码的第一个字符和最后一个字符进行交换。
        decryptedPassword.reverse();
        if (decryptedPassword.length() >= 2) {
            char firstChar = decryptedPassword.charAt(0);
            char lastChar = decryptedPassword.charAt(decryptedPassword.length() - 1);
            decryptedPassword.setCharAt(0, lastChar);
            decryptedPassword.setCharAt(decryptedPassword.length() - 1, firstChar);
        }
       //解密密码函数
        for (int i = 0; i < decryptedPassword.length(); i++) {
            char c = decryptedPassword.charAt(i);
            int ascii = (int) c - i - 1 - 3;
            decryptedPassword.setCharAt(i, (char) ascii);
        }
        return decryptedPassword.toString();
    }
}